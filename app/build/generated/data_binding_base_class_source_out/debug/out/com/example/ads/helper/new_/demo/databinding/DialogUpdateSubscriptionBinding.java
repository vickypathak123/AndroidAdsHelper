// Generated by view binder compiler. Do not edit!
package com.example.ads.helper.new_.demo.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.SwitchCompat;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.ads.helper.new_.demo.R;
import com.github.naz013.colorslider.ColorSlider;
import com.google.android.material.card.MaterialCardView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DialogUpdateSubscriptionBinding implements ViewBinding {
  @NonNull
  private final MaterialCardView rootView;

  @NonNull
  public final Button btnCancel;

  @NonNull
  public final Button btnUpdate;

  @NonNull
  public final ColorSlider colorPikerButtonContinueTextColor;

  @NonNull
  public final ColorSlider colorPikerCloseIcon;

  @NonNull
  public final ColorSlider colorPikerInstantAccessHintTextColor;

  @NonNull
  public final ColorSlider colorPikerSecureWithPlayStoreBackgroundColor;

  @NonNull
  public final ColorSlider colorPikerSecureWithPlayStoreTextColor;

  @NonNull
  public final ColorSlider colorPikerTimeLineHeaderColor;

  @NonNull
  public final ColorSlider colorPikerTimeLineHintTextColor;

  @NonNull
  public final ColorSlider colorPikerTimeLineMainColor;

  @NonNull
  public final ColorSlider colorPikerTrackInactive;

  @NonNull
  public final Spinner spLanguage;

  @NonNull
  public final SwitchCompat txtButtonContinueTextColor;

  @NonNull
  public final SwitchCompat txtCloseIconColor;

  @NonNull
  public final SwitchCompat txtInstantAccessHintTextColor;

  @NonNull
  public final TextView txtLanguage;

  @NonNull
  public final SwitchCompat txtSecureWithPlayStoreBackgroundColor;

  @NonNull
  public final SwitchCompat txtSecureWithPlayStoreTextColor;

  @NonNull
  public final SwitchCompat txtTimeLineHeaderColor;

  @NonNull
  public final SwitchCompat txtTimeLineHintTextColor;

  @NonNull
  public final SwitchCompat txtTimeLineMainColor;

  @NonNull
  public final SwitchCompat txtTrackInactiveColor;

  @NonNull
  public final SwitchCompat useInstantAccessLottieFile;

  @NonNull
  public final SwitchCompat withSliderAnimation;

  private DialogUpdateSubscriptionBinding(@NonNull MaterialCardView rootView,
      @NonNull Button btnCancel, @NonNull Button btnUpdate,
      @NonNull ColorSlider colorPikerButtonContinueTextColor,
      @NonNull ColorSlider colorPikerCloseIcon,
      @NonNull ColorSlider colorPikerInstantAccessHintTextColor,
      @NonNull ColorSlider colorPikerSecureWithPlayStoreBackgroundColor,
      @NonNull ColorSlider colorPikerSecureWithPlayStoreTextColor,
      @NonNull ColorSlider colorPikerTimeLineHeaderColor,
      @NonNull ColorSlider colorPikerTimeLineHintTextColor,
      @NonNull ColorSlider colorPikerTimeLineMainColor,
      @NonNull ColorSlider colorPikerTrackInactive, @NonNull Spinner spLanguage,
      @NonNull SwitchCompat txtButtonContinueTextColor, @NonNull SwitchCompat txtCloseIconColor,
      @NonNull SwitchCompat txtInstantAccessHintTextColor, @NonNull TextView txtLanguage,
      @NonNull SwitchCompat txtSecureWithPlayStoreBackgroundColor,
      @NonNull SwitchCompat txtSecureWithPlayStoreTextColor,
      @NonNull SwitchCompat txtTimeLineHeaderColor, @NonNull SwitchCompat txtTimeLineHintTextColor,
      @NonNull SwitchCompat txtTimeLineMainColor, @NonNull SwitchCompat txtTrackInactiveColor,
      @NonNull SwitchCompat useInstantAccessLottieFile, @NonNull SwitchCompat withSliderAnimation) {
    this.rootView = rootView;
    this.btnCancel = btnCancel;
    this.btnUpdate = btnUpdate;
    this.colorPikerButtonContinueTextColor = colorPikerButtonContinueTextColor;
    this.colorPikerCloseIcon = colorPikerCloseIcon;
    this.colorPikerInstantAccessHintTextColor = colorPikerInstantAccessHintTextColor;
    this.colorPikerSecureWithPlayStoreBackgroundColor = colorPikerSecureWithPlayStoreBackgroundColor;
    this.colorPikerSecureWithPlayStoreTextColor = colorPikerSecureWithPlayStoreTextColor;
    this.colorPikerTimeLineHeaderColor = colorPikerTimeLineHeaderColor;
    this.colorPikerTimeLineHintTextColor = colorPikerTimeLineHintTextColor;
    this.colorPikerTimeLineMainColor = colorPikerTimeLineMainColor;
    this.colorPikerTrackInactive = colorPikerTrackInactive;
    this.spLanguage = spLanguage;
    this.txtButtonContinueTextColor = txtButtonContinueTextColor;
    this.txtCloseIconColor = txtCloseIconColor;
    this.txtInstantAccessHintTextColor = txtInstantAccessHintTextColor;
    this.txtLanguage = txtLanguage;
    this.txtSecureWithPlayStoreBackgroundColor = txtSecureWithPlayStoreBackgroundColor;
    this.txtSecureWithPlayStoreTextColor = txtSecureWithPlayStoreTextColor;
    this.txtTimeLineHeaderColor = txtTimeLineHeaderColor;
    this.txtTimeLineHintTextColor = txtTimeLineHintTextColor;
    this.txtTimeLineMainColor = txtTimeLineMainColor;
    this.txtTrackInactiveColor = txtTrackInactiveColor;
    this.useInstantAccessLottieFile = useInstantAccessLottieFile;
    this.withSliderAnimation = withSliderAnimation;
  }

  @Override
  @NonNull
  public MaterialCardView getRoot() {
    return rootView;
  }

  @NonNull
  public static DialogUpdateSubscriptionBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DialogUpdateSubscriptionBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.dialog_update_subscription, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DialogUpdateSubscriptionBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_cancel;
      Button btnCancel = ViewBindings.findChildViewById(rootView, id);
      if (btnCancel == null) {
        break missingId;
      }

      id = R.id.btn_update;
      Button btnUpdate = ViewBindings.findChildViewById(rootView, id);
      if (btnUpdate == null) {
        break missingId;
      }

      id = R.id.color_piker_button_continue_text_color;
      ColorSlider colorPikerButtonContinueTextColor = ViewBindings.findChildViewById(rootView, id);
      if (colorPikerButtonContinueTextColor == null) {
        break missingId;
      }

      id = R.id.color_piker_close_icon;
      ColorSlider colorPikerCloseIcon = ViewBindings.findChildViewById(rootView, id);
      if (colorPikerCloseIcon == null) {
        break missingId;
      }

      id = R.id.color_piker_instant_access_hint_text_color;
      ColorSlider colorPikerInstantAccessHintTextColor = ViewBindings.findChildViewById(rootView, id);
      if (colorPikerInstantAccessHintTextColor == null) {
        break missingId;
      }

      id = R.id.color_piker_secure_with_play_store_background_color;
      ColorSlider colorPikerSecureWithPlayStoreBackgroundColor = ViewBindings.findChildViewById(rootView, id);
      if (colorPikerSecureWithPlayStoreBackgroundColor == null) {
        break missingId;
      }

      id = R.id.color_piker_secure_with_play_store_text_color;
      ColorSlider colorPikerSecureWithPlayStoreTextColor = ViewBindings.findChildViewById(rootView, id);
      if (colorPikerSecureWithPlayStoreTextColor == null) {
        break missingId;
      }

      id = R.id.color_piker_time_line_header_color;
      ColorSlider colorPikerTimeLineHeaderColor = ViewBindings.findChildViewById(rootView, id);
      if (colorPikerTimeLineHeaderColor == null) {
        break missingId;
      }

      id = R.id.color_piker_time_line_hint_text_color;
      ColorSlider colorPikerTimeLineHintTextColor = ViewBindings.findChildViewById(rootView, id);
      if (colorPikerTimeLineHintTextColor == null) {
        break missingId;
      }

      id = R.id.color_piker_time_line_main_color;
      ColorSlider colorPikerTimeLineMainColor = ViewBindings.findChildViewById(rootView, id);
      if (colorPikerTimeLineMainColor == null) {
        break missingId;
      }

      id = R.id.color_piker_track_inactive;
      ColorSlider colorPikerTrackInactive = ViewBindings.findChildViewById(rootView, id);
      if (colorPikerTrackInactive == null) {
        break missingId;
      }

      id = R.id.sp_language;
      Spinner spLanguage = ViewBindings.findChildViewById(rootView, id);
      if (spLanguage == null) {
        break missingId;
      }

      id = R.id.txt_button_continue_text_color;
      SwitchCompat txtButtonContinueTextColor = ViewBindings.findChildViewById(rootView, id);
      if (txtButtonContinueTextColor == null) {
        break missingId;
      }

      id = R.id.txt_close_icon_color;
      SwitchCompat txtCloseIconColor = ViewBindings.findChildViewById(rootView, id);
      if (txtCloseIconColor == null) {
        break missingId;
      }

      id = R.id.txt_instant_access_hint_text_color;
      SwitchCompat txtInstantAccessHintTextColor = ViewBindings.findChildViewById(rootView, id);
      if (txtInstantAccessHintTextColor == null) {
        break missingId;
      }

      id = R.id.txt_language;
      TextView txtLanguage = ViewBindings.findChildViewById(rootView, id);
      if (txtLanguage == null) {
        break missingId;
      }

      id = R.id.txt_secure_with_play_store_background_color;
      SwitchCompat txtSecureWithPlayStoreBackgroundColor = ViewBindings.findChildViewById(rootView, id);
      if (txtSecureWithPlayStoreBackgroundColor == null) {
        break missingId;
      }

      id = R.id.txt_secure_with_play_store_text_color;
      SwitchCompat txtSecureWithPlayStoreTextColor = ViewBindings.findChildViewById(rootView, id);
      if (txtSecureWithPlayStoreTextColor == null) {
        break missingId;
      }

      id = R.id.txt_time_line_header_color;
      SwitchCompat txtTimeLineHeaderColor = ViewBindings.findChildViewById(rootView, id);
      if (txtTimeLineHeaderColor == null) {
        break missingId;
      }

      id = R.id.txt_time_line_hint_text_color;
      SwitchCompat txtTimeLineHintTextColor = ViewBindings.findChildViewById(rootView, id);
      if (txtTimeLineHintTextColor == null) {
        break missingId;
      }

      id = R.id.txt_time_line_main_color;
      SwitchCompat txtTimeLineMainColor = ViewBindings.findChildViewById(rootView, id);
      if (txtTimeLineMainColor == null) {
        break missingId;
      }

      id = R.id.txt_track_inactive_color;
      SwitchCompat txtTrackInactiveColor = ViewBindings.findChildViewById(rootView, id);
      if (txtTrackInactiveColor == null) {
        break missingId;
      }

      id = R.id.use_instant_access_lottie_file;
      SwitchCompat useInstantAccessLottieFile = ViewBindings.findChildViewById(rootView, id);
      if (useInstantAccessLottieFile == null) {
        break missingId;
      }

      id = R.id.with_slider_animation;
      SwitchCompat withSliderAnimation = ViewBindings.findChildViewById(rootView, id);
      if (withSliderAnimation == null) {
        break missingId;
      }

      return new DialogUpdateSubscriptionBinding((MaterialCardView) rootView, btnCancel, btnUpdate,
          colorPikerButtonContinueTextColor, colorPikerCloseIcon,
          colorPikerInstantAccessHintTextColor, colorPikerSecureWithPlayStoreBackgroundColor,
          colorPikerSecureWithPlayStoreTextColor, colorPikerTimeLineHeaderColor,
          colorPikerTimeLineHintTextColor, colorPikerTimeLineMainColor, colorPikerTrackInactive,
          spLanguage, txtButtonContinueTextColor, txtCloseIconColor, txtInstantAccessHintTextColor,
          txtLanguage, txtSecureWithPlayStoreBackgroundColor, txtSecureWithPlayStoreTextColor,
          txtTimeLineHeaderColor, txtTimeLineHintTextColor, txtTimeLineMainColor,
          txtTrackInactiveColor, useInstantAccessLottieFile, withSliderAnimation);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
