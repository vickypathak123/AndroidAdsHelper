// Generated by view binder compiler. Do not edit!
package com.example.ads.helper.new_.demo.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.SwitchCompat;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.ads.helper.new_.demo.R;
import com.github.naz013.colorslider.ColorSlider;
import com.google.android.material.card.MaterialCardView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DialogUpdateBannerBinding implements ViewBinding {
  @NonNull
  private final MaterialCardView rootView;

  @NonNull
  public final Button btnCancel;

  @NonNull
  public final Button btnUpdate;

  @NonNull
  public final ColorSlider colorPiker;

  @NonNull
  public final SwitchCompat customPlaceholderSwitch;

  @NonNull
  public final Spinner spAdSize;

  @NonNull
  public final Spinner spAdType;

  @NonNull
  public final Spinner spPlaceholderType;

  @NonNull
  public final TextView txtAdSizeHint;

  @NonNull
  public final TextView txtAdTypeHint;

  @NonNull
  public final TextView txtPlaceholderTextColor;

  @NonNull
  public final TextView txtPlaceholderTypeHint;

  private DialogUpdateBannerBinding(@NonNull MaterialCardView rootView, @NonNull Button btnCancel,
      @NonNull Button btnUpdate, @NonNull ColorSlider colorPiker,
      @NonNull SwitchCompat customPlaceholderSwitch, @NonNull Spinner spAdSize,
      @NonNull Spinner spAdType, @NonNull Spinner spPlaceholderType,
      @NonNull TextView txtAdSizeHint, @NonNull TextView txtAdTypeHint,
      @NonNull TextView txtPlaceholderTextColor, @NonNull TextView txtPlaceholderTypeHint) {
    this.rootView = rootView;
    this.btnCancel = btnCancel;
    this.btnUpdate = btnUpdate;
    this.colorPiker = colorPiker;
    this.customPlaceholderSwitch = customPlaceholderSwitch;
    this.spAdSize = spAdSize;
    this.spAdType = spAdType;
    this.spPlaceholderType = spPlaceholderType;
    this.txtAdSizeHint = txtAdSizeHint;
    this.txtAdTypeHint = txtAdTypeHint;
    this.txtPlaceholderTextColor = txtPlaceholderTextColor;
    this.txtPlaceholderTypeHint = txtPlaceholderTypeHint;
  }

  @Override
  @NonNull
  public MaterialCardView getRoot() {
    return rootView;
  }

  @NonNull
  public static DialogUpdateBannerBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DialogUpdateBannerBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.dialog_update_banner, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DialogUpdateBannerBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_cancel;
      Button btnCancel = ViewBindings.findChildViewById(rootView, id);
      if (btnCancel == null) {
        break missingId;
      }

      id = R.id.btn_update;
      Button btnUpdate = ViewBindings.findChildViewById(rootView, id);
      if (btnUpdate == null) {
        break missingId;
      }

      id = R.id.color_piker;
      ColorSlider colorPiker = ViewBindings.findChildViewById(rootView, id);
      if (colorPiker == null) {
        break missingId;
      }

      id = R.id.custom_placeholder_switch;
      SwitchCompat customPlaceholderSwitch = ViewBindings.findChildViewById(rootView, id);
      if (customPlaceholderSwitch == null) {
        break missingId;
      }

      id = R.id.sp_ad_size;
      Spinner spAdSize = ViewBindings.findChildViewById(rootView, id);
      if (spAdSize == null) {
        break missingId;
      }

      id = R.id.sp_ad_type;
      Spinner spAdType = ViewBindings.findChildViewById(rootView, id);
      if (spAdType == null) {
        break missingId;
      }

      id = R.id.sp_placeholder_type;
      Spinner spPlaceholderType = ViewBindings.findChildViewById(rootView, id);
      if (spPlaceholderType == null) {
        break missingId;
      }

      id = R.id.txt_ad_size_hint;
      TextView txtAdSizeHint = ViewBindings.findChildViewById(rootView, id);
      if (txtAdSizeHint == null) {
        break missingId;
      }

      id = R.id.txt_ad_type_hint;
      TextView txtAdTypeHint = ViewBindings.findChildViewById(rootView, id);
      if (txtAdTypeHint == null) {
        break missingId;
      }

      id = R.id.txt_placeholder_text_color;
      TextView txtPlaceholderTextColor = ViewBindings.findChildViewById(rootView, id);
      if (txtPlaceholderTextColor == null) {
        break missingId;
      }

      id = R.id.txt_placeholder_type_hint;
      TextView txtPlaceholderTypeHint = ViewBindings.findChildViewById(rootView, id);
      if (txtPlaceholderTypeHint == null) {
        break missingId;
      }

      return new DialogUpdateBannerBinding((MaterialCardView) rootView, btnCancel, btnUpdate,
          colorPiker, customPlaceholderSwitch, spAdSize, spAdType, spPlaceholderType, txtAdSizeHint,
          txtAdTypeHint, txtPlaceholderTextColor, txtPlaceholderTypeHint);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
