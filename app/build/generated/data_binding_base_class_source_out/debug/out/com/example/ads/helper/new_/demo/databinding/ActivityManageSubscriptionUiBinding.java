// Generated by view binder compiler. Do not edit!
package com.example.ads.helper.new_.demo.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.SwitchCompat;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.ads.helper.new_.demo.R;
import com.google.android.material.slider.Slider;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityManageSubscriptionUiBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Slider animationTimeSlider;

  @NonNull
  public final Button btnCancel;

  @NonNull
  public final Button btnTest;

  @NonNull
  public final Button btnUpdate;

  @NonNull
  public final ConstraintLayout clBottom;

  @NonNull
  public final ConstraintLayout clTimeLineScreenUi;

  @NonNull
  public final ConstraintLayout clTop;

  @NonNull
  public final ConstraintLayout clViewAllPlansScreenUi;

  @NonNull
  public final EditText etPrivacyPolicy;

  @NonNull
  public final EditText etTermsOfUse;

  @NonNull
  public final AllScreenHeaderBinding layoutHeader;

  @NonNull
  public final ItemSwitchWithColorSliderBinding lyTimeLineButtonContinueTextColor;

  @NonNull
  public final ItemSwitchWithColorSliderBinding lyTimeLineCloseIconColor;

  @NonNull
  public final ItemSwitchWithColorSliderBinding lyTimeLineHeaderColor;

  @NonNull
  public final ItemSwitchWithColorSliderBinding lyTimeLineHintTextColor;

  @NonNull
  public final ItemSwitchWithColorSliderBinding lyTimeLineInstantAccessHintTextColor;

  @NonNull
  public final ItemSwitchWithColorSliderBinding lyTimeLineMainColor;

  @NonNull
  public final ItemSwitchWithColorSliderBinding lyTimeLineSecureWithPlayStoreBackgroundColor;

  @NonNull
  public final ItemSwitchWithColorSliderBinding lyTimeLineSecureWithPlayStoreTextColor;

  @NonNull
  public final ItemSwitchWithColorSliderBinding lyTimeLineTrackInactiveColor;

  @NonNull
  public final ItemSwitchWithColorSliderBinding lyViewAllPlansCloseIconColor;

  @NonNull
  public final ItemSwitchWithColorSliderBinding lyViewAllPlansHeaderColor;

  @NonNull
  public final ItemSwitchWithColorSliderBinding lyViewAllPlansItemBoxBackgroundColor;

  @NonNull
  public final ItemSwitchWithColorSliderBinding lyViewAllPlansPayNothingNowColor;

  @NonNull
  public final ItemSwitchWithColorSliderBinding lyViewAllPlansRatingColor;

  @NonNull
  public final ItemSwitchWithColorSliderBinding lyViewAllPlansRatingIndicatorColor;

  @NonNull
  public final ItemSwitchWithColorSliderBinding lyViewAllPlansRatingPlaceHolderColor;

  @NonNull
  public final ItemSwitchWithColorSliderBinding lyViewAllPlansSecureWithPlayStoreBackgroundColor;

  @NonNull
  public final ItemSwitchWithColorSliderBinding lyViewAllPlansSecureWithPlayStoreTextColor;

  @NonNull
  public final ItemSwitchWithColorSliderBinding lyViewAllPlansSelectedItemDataColor;

  @NonNull
  public final ItemSwitchWithColorSliderBinding lyViewAllPlansSelectedSkuBackgroundColor;

  @NonNull
  public final ItemSwitchWithColorSliderBinding lyViewAllPlansSubHeaderColor;

  @NonNull
  public final ItemSwitchWithColorSliderBinding lyViewAllPlansUnselectedItemDataColor;

  @NonNull
  public final ItemSwitchWithColorSliderBinding lyViewAllPlansUnselectedSkuBackgroundColor;

  @NonNull
  public final ConstraintLayout main;

  @NonNull
  public final Spinner spAnimationName;

  @NonNull
  public final Spinner spLanguage;

  @NonNull
  public final SwitchCompat switchCloseAdForTimeLineScreen;

  @NonNull
  public final SwitchCompat switchCloseAdForViewAllPlansScreen;

  @NonNull
  public final SwitchCompat switchCloseAdForViewAllPlansScreenAfterSplash;

  @NonNull
  public final SwitchCompat switchIsFromSplash;

  @NonNull
  public final SwitchCompat switchPrivacyPolicy;

  @NonNull
  public final SwitchCompat switchShowOnlyViewAllPlans;

  @NonNull
  public final SwitchCompat switchTermsOfUse;

  @NonNull
  public final SwitchCompat switchTimeLineInstantAccessAnimation;

  @NonNull
  public final SwitchCompat switchTimeLineScreenUi;

  @NonNull
  public final SwitchCompat switchTimeLineSliderAnimation;

  @NonNull
  public final SwitchCompat switchViewAllPlansScreenUi;

  @NonNull
  public final TextView txtAnimationName;

  @NonNull
  public final TextView txtLanguage;

  private ActivityManageSubscriptionUiBinding(@NonNull ConstraintLayout rootView,
      @NonNull Slider animationTimeSlider, @NonNull Button btnCancel, @NonNull Button btnTest,
      @NonNull Button btnUpdate, @NonNull ConstraintLayout clBottom,
      @NonNull ConstraintLayout clTimeLineScreenUi, @NonNull ConstraintLayout clTop,
      @NonNull ConstraintLayout clViewAllPlansScreenUi, @NonNull EditText etPrivacyPolicy,
      @NonNull EditText etTermsOfUse, @NonNull AllScreenHeaderBinding layoutHeader,
      @NonNull ItemSwitchWithColorSliderBinding lyTimeLineButtonContinueTextColor,
      @NonNull ItemSwitchWithColorSliderBinding lyTimeLineCloseIconColor,
      @NonNull ItemSwitchWithColorSliderBinding lyTimeLineHeaderColor,
      @NonNull ItemSwitchWithColorSliderBinding lyTimeLineHintTextColor,
      @NonNull ItemSwitchWithColorSliderBinding lyTimeLineInstantAccessHintTextColor,
      @NonNull ItemSwitchWithColorSliderBinding lyTimeLineMainColor,
      @NonNull ItemSwitchWithColorSliderBinding lyTimeLineSecureWithPlayStoreBackgroundColor,
      @NonNull ItemSwitchWithColorSliderBinding lyTimeLineSecureWithPlayStoreTextColor,
      @NonNull ItemSwitchWithColorSliderBinding lyTimeLineTrackInactiveColor,
      @NonNull ItemSwitchWithColorSliderBinding lyViewAllPlansCloseIconColor,
      @NonNull ItemSwitchWithColorSliderBinding lyViewAllPlansHeaderColor,
      @NonNull ItemSwitchWithColorSliderBinding lyViewAllPlansItemBoxBackgroundColor,
      @NonNull ItemSwitchWithColorSliderBinding lyViewAllPlansPayNothingNowColor,
      @NonNull ItemSwitchWithColorSliderBinding lyViewAllPlansRatingColor,
      @NonNull ItemSwitchWithColorSliderBinding lyViewAllPlansRatingIndicatorColor,
      @NonNull ItemSwitchWithColorSliderBinding lyViewAllPlansRatingPlaceHolderColor,
      @NonNull ItemSwitchWithColorSliderBinding lyViewAllPlansSecureWithPlayStoreBackgroundColor,
      @NonNull ItemSwitchWithColorSliderBinding lyViewAllPlansSecureWithPlayStoreTextColor,
      @NonNull ItemSwitchWithColorSliderBinding lyViewAllPlansSelectedItemDataColor,
      @NonNull ItemSwitchWithColorSliderBinding lyViewAllPlansSelectedSkuBackgroundColor,
      @NonNull ItemSwitchWithColorSliderBinding lyViewAllPlansSubHeaderColor,
      @NonNull ItemSwitchWithColorSliderBinding lyViewAllPlansUnselectedItemDataColor,
      @NonNull ItemSwitchWithColorSliderBinding lyViewAllPlansUnselectedSkuBackgroundColor,
      @NonNull ConstraintLayout main, @NonNull Spinner spAnimationName, @NonNull Spinner spLanguage,
      @NonNull SwitchCompat switchCloseAdForTimeLineScreen,
      @NonNull SwitchCompat switchCloseAdForViewAllPlansScreen,
      @NonNull SwitchCompat switchCloseAdForViewAllPlansScreenAfterSplash,
      @NonNull SwitchCompat switchIsFromSplash, @NonNull SwitchCompat switchPrivacyPolicy,
      @NonNull SwitchCompat switchShowOnlyViewAllPlans, @NonNull SwitchCompat switchTermsOfUse,
      @NonNull SwitchCompat switchTimeLineInstantAccessAnimation,
      @NonNull SwitchCompat switchTimeLineScreenUi,
      @NonNull SwitchCompat switchTimeLineSliderAnimation,
      @NonNull SwitchCompat switchViewAllPlansScreenUi, @NonNull TextView txtAnimationName,
      @NonNull TextView txtLanguage) {
    this.rootView = rootView;
    this.animationTimeSlider = animationTimeSlider;
    this.btnCancel = btnCancel;
    this.btnTest = btnTest;
    this.btnUpdate = btnUpdate;
    this.clBottom = clBottom;
    this.clTimeLineScreenUi = clTimeLineScreenUi;
    this.clTop = clTop;
    this.clViewAllPlansScreenUi = clViewAllPlansScreenUi;
    this.etPrivacyPolicy = etPrivacyPolicy;
    this.etTermsOfUse = etTermsOfUse;
    this.layoutHeader = layoutHeader;
    this.lyTimeLineButtonContinueTextColor = lyTimeLineButtonContinueTextColor;
    this.lyTimeLineCloseIconColor = lyTimeLineCloseIconColor;
    this.lyTimeLineHeaderColor = lyTimeLineHeaderColor;
    this.lyTimeLineHintTextColor = lyTimeLineHintTextColor;
    this.lyTimeLineInstantAccessHintTextColor = lyTimeLineInstantAccessHintTextColor;
    this.lyTimeLineMainColor = lyTimeLineMainColor;
    this.lyTimeLineSecureWithPlayStoreBackgroundColor = lyTimeLineSecureWithPlayStoreBackgroundColor;
    this.lyTimeLineSecureWithPlayStoreTextColor = lyTimeLineSecureWithPlayStoreTextColor;
    this.lyTimeLineTrackInactiveColor = lyTimeLineTrackInactiveColor;
    this.lyViewAllPlansCloseIconColor = lyViewAllPlansCloseIconColor;
    this.lyViewAllPlansHeaderColor = lyViewAllPlansHeaderColor;
    this.lyViewAllPlansItemBoxBackgroundColor = lyViewAllPlansItemBoxBackgroundColor;
    this.lyViewAllPlansPayNothingNowColor = lyViewAllPlansPayNothingNowColor;
    this.lyViewAllPlansRatingColor = lyViewAllPlansRatingColor;
    this.lyViewAllPlansRatingIndicatorColor = lyViewAllPlansRatingIndicatorColor;
    this.lyViewAllPlansRatingPlaceHolderColor = lyViewAllPlansRatingPlaceHolderColor;
    this.lyViewAllPlansSecureWithPlayStoreBackgroundColor = lyViewAllPlansSecureWithPlayStoreBackgroundColor;
    this.lyViewAllPlansSecureWithPlayStoreTextColor = lyViewAllPlansSecureWithPlayStoreTextColor;
    this.lyViewAllPlansSelectedItemDataColor = lyViewAllPlansSelectedItemDataColor;
    this.lyViewAllPlansSelectedSkuBackgroundColor = lyViewAllPlansSelectedSkuBackgroundColor;
    this.lyViewAllPlansSubHeaderColor = lyViewAllPlansSubHeaderColor;
    this.lyViewAllPlansUnselectedItemDataColor = lyViewAllPlansUnselectedItemDataColor;
    this.lyViewAllPlansUnselectedSkuBackgroundColor = lyViewAllPlansUnselectedSkuBackgroundColor;
    this.main = main;
    this.spAnimationName = spAnimationName;
    this.spLanguage = spLanguage;
    this.switchCloseAdForTimeLineScreen = switchCloseAdForTimeLineScreen;
    this.switchCloseAdForViewAllPlansScreen = switchCloseAdForViewAllPlansScreen;
    this.switchCloseAdForViewAllPlansScreenAfterSplash = switchCloseAdForViewAllPlansScreenAfterSplash;
    this.switchIsFromSplash = switchIsFromSplash;
    this.switchPrivacyPolicy = switchPrivacyPolicy;
    this.switchShowOnlyViewAllPlans = switchShowOnlyViewAllPlans;
    this.switchTermsOfUse = switchTermsOfUse;
    this.switchTimeLineInstantAccessAnimation = switchTimeLineInstantAccessAnimation;
    this.switchTimeLineScreenUi = switchTimeLineScreenUi;
    this.switchTimeLineSliderAnimation = switchTimeLineSliderAnimation;
    this.switchViewAllPlansScreenUi = switchViewAllPlansScreenUi;
    this.txtAnimationName = txtAnimationName;
    this.txtLanguage = txtLanguage;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityManageSubscriptionUiBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityManageSubscriptionUiBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_manage_subscription_ui, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityManageSubscriptionUiBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.animation_time_slider;
      Slider animationTimeSlider = ViewBindings.findChildViewById(rootView, id);
      if (animationTimeSlider == null) {
        break missingId;
      }

      id = R.id.btn_cancel;
      Button btnCancel = ViewBindings.findChildViewById(rootView, id);
      if (btnCancel == null) {
        break missingId;
      }

      id = R.id.btn_test;
      Button btnTest = ViewBindings.findChildViewById(rootView, id);
      if (btnTest == null) {
        break missingId;
      }

      id = R.id.btn_update;
      Button btnUpdate = ViewBindings.findChildViewById(rootView, id);
      if (btnUpdate == null) {
        break missingId;
      }

      id = R.id.cl_bottom;
      ConstraintLayout clBottom = ViewBindings.findChildViewById(rootView, id);
      if (clBottom == null) {
        break missingId;
      }

      id = R.id.cl_time_line_screen_ui;
      ConstraintLayout clTimeLineScreenUi = ViewBindings.findChildViewById(rootView, id);
      if (clTimeLineScreenUi == null) {
        break missingId;
      }

      id = R.id.cl_top;
      ConstraintLayout clTop = ViewBindings.findChildViewById(rootView, id);
      if (clTop == null) {
        break missingId;
      }

      id = R.id.cl_view_all_plans_screen_ui;
      ConstraintLayout clViewAllPlansScreenUi = ViewBindings.findChildViewById(rootView, id);
      if (clViewAllPlansScreenUi == null) {
        break missingId;
      }

      id = R.id.et_privacy_policy;
      EditText etPrivacyPolicy = ViewBindings.findChildViewById(rootView, id);
      if (etPrivacyPolicy == null) {
        break missingId;
      }

      id = R.id.et_terms_of_use;
      EditText etTermsOfUse = ViewBindings.findChildViewById(rootView, id);
      if (etTermsOfUse == null) {
        break missingId;
      }

      id = R.id.layout_header;
      View layoutHeader = ViewBindings.findChildViewById(rootView, id);
      if (layoutHeader == null) {
        break missingId;
      }
      AllScreenHeaderBinding binding_layoutHeader = AllScreenHeaderBinding.bind(layoutHeader);

      id = R.id.ly_time_line_button_continue_text_color;
      View lyTimeLineButtonContinueTextColor = ViewBindings.findChildViewById(rootView, id);
      if (lyTimeLineButtonContinueTextColor == null) {
        break missingId;
      }
      ItemSwitchWithColorSliderBinding binding_lyTimeLineButtonContinueTextColor = ItemSwitchWithColorSliderBinding.bind(lyTimeLineButtonContinueTextColor);

      id = R.id.ly_time_line_close_icon_color;
      View lyTimeLineCloseIconColor = ViewBindings.findChildViewById(rootView, id);
      if (lyTimeLineCloseIconColor == null) {
        break missingId;
      }
      ItemSwitchWithColorSliderBinding binding_lyTimeLineCloseIconColor = ItemSwitchWithColorSliderBinding.bind(lyTimeLineCloseIconColor);

      id = R.id.ly_time_line_header_color;
      View lyTimeLineHeaderColor = ViewBindings.findChildViewById(rootView, id);
      if (lyTimeLineHeaderColor == null) {
        break missingId;
      }
      ItemSwitchWithColorSliderBinding binding_lyTimeLineHeaderColor = ItemSwitchWithColorSliderBinding.bind(lyTimeLineHeaderColor);

      id = R.id.ly_time_line_hint_text_color;
      View lyTimeLineHintTextColor = ViewBindings.findChildViewById(rootView, id);
      if (lyTimeLineHintTextColor == null) {
        break missingId;
      }
      ItemSwitchWithColorSliderBinding binding_lyTimeLineHintTextColor = ItemSwitchWithColorSliderBinding.bind(lyTimeLineHintTextColor);

      id = R.id.ly_time_line_instant_access_hint_text_color;
      View lyTimeLineInstantAccessHintTextColor = ViewBindings.findChildViewById(rootView, id);
      if (lyTimeLineInstantAccessHintTextColor == null) {
        break missingId;
      }
      ItemSwitchWithColorSliderBinding binding_lyTimeLineInstantAccessHintTextColor = ItemSwitchWithColorSliderBinding.bind(lyTimeLineInstantAccessHintTextColor);

      id = R.id.ly_time_line_main_color;
      View lyTimeLineMainColor = ViewBindings.findChildViewById(rootView, id);
      if (lyTimeLineMainColor == null) {
        break missingId;
      }
      ItemSwitchWithColorSliderBinding binding_lyTimeLineMainColor = ItemSwitchWithColorSliderBinding.bind(lyTimeLineMainColor);

      id = R.id.ly_time_line_secure_with_play_store_background_color;
      View lyTimeLineSecureWithPlayStoreBackgroundColor = ViewBindings.findChildViewById(rootView, id);
      if (lyTimeLineSecureWithPlayStoreBackgroundColor == null) {
        break missingId;
      }
      ItemSwitchWithColorSliderBinding binding_lyTimeLineSecureWithPlayStoreBackgroundColor = ItemSwitchWithColorSliderBinding.bind(lyTimeLineSecureWithPlayStoreBackgroundColor);

      id = R.id.ly_time_line_secure_with_play_store_text_color;
      View lyTimeLineSecureWithPlayStoreTextColor = ViewBindings.findChildViewById(rootView, id);
      if (lyTimeLineSecureWithPlayStoreTextColor == null) {
        break missingId;
      }
      ItemSwitchWithColorSliderBinding binding_lyTimeLineSecureWithPlayStoreTextColor = ItemSwitchWithColorSliderBinding.bind(lyTimeLineSecureWithPlayStoreTextColor);

      id = R.id.ly_time_line_track_inactive_color;
      View lyTimeLineTrackInactiveColor = ViewBindings.findChildViewById(rootView, id);
      if (lyTimeLineTrackInactiveColor == null) {
        break missingId;
      }
      ItemSwitchWithColorSliderBinding binding_lyTimeLineTrackInactiveColor = ItemSwitchWithColorSliderBinding.bind(lyTimeLineTrackInactiveColor);

      id = R.id.ly_view_all_plans_close_icon_color;
      View lyViewAllPlansCloseIconColor = ViewBindings.findChildViewById(rootView, id);
      if (lyViewAllPlansCloseIconColor == null) {
        break missingId;
      }
      ItemSwitchWithColorSliderBinding binding_lyViewAllPlansCloseIconColor = ItemSwitchWithColorSliderBinding.bind(lyViewAllPlansCloseIconColor);

      id = R.id.ly_view_all_plans_header_color;
      View lyViewAllPlansHeaderColor = ViewBindings.findChildViewById(rootView, id);
      if (lyViewAllPlansHeaderColor == null) {
        break missingId;
      }
      ItemSwitchWithColorSliderBinding binding_lyViewAllPlansHeaderColor = ItemSwitchWithColorSliderBinding.bind(lyViewAllPlansHeaderColor);

      id = R.id.ly_view_all_plans_item_box_background_color;
      View lyViewAllPlansItemBoxBackgroundColor = ViewBindings.findChildViewById(rootView, id);
      if (lyViewAllPlansItemBoxBackgroundColor == null) {
        break missingId;
      }
      ItemSwitchWithColorSliderBinding binding_lyViewAllPlansItemBoxBackgroundColor = ItemSwitchWithColorSliderBinding.bind(lyViewAllPlansItemBoxBackgroundColor);

      id = R.id.ly_view_all_plans_pay_nothing_now_color;
      View lyViewAllPlansPayNothingNowColor = ViewBindings.findChildViewById(rootView, id);
      if (lyViewAllPlansPayNothingNowColor == null) {
        break missingId;
      }
      ItemSwitchWithColorSliderBinding binding_lyViewAllPlansPayNothingNowColor = ItemSwitchWithColorSliderBinding.bind(lyViewAllPlansPayNothingNowColor);

      id = R.id.ly_view_all_plans_rating_color;
      View lyViewAllPlansRatingColor = ViewBindings.findChildViewById(rootView, id);
      if (lyViewAllPlansRatingColor == null) {
        break missingId;
      }
      ItemSwitchWithColorSliderBinding binding_lyViewAllPlansRatingColor = ItemSwitchWithColorSliderBinding.bind(lyViewAllPlansRatingColor);

      id = R.id.ly_view_all_plans_rating_indicator_color;
      View lyViewAllPlansRatingIndicatorColor = ViewBindings.findChildViewById(rootView, id);
      if (lyViewAllPlansRatingIndicatorColor == null) {
        break missingId;
      }
      ItemSwitchWithColorSliderBinding binding_lyViewAllPlansRatingIndicatorColor = ItemSwitchWithColorSliderBinding.bind(lyViewAllPlansRatingIndicatorColor);

      id = R.id.ly_view_all_plans_rating_place_holder_color;
      View lyViewAllPlansRatingPlaceHolderColor = ViewBindings.findChildViewById(rootView, id);
      if (lyViewAllPlansRatingPlaceHolderColor == null) {
        break missingId;
      }
      ItemSwitchWithColorSliderBinding binding_lyViewAllPlansRatingPlaceHolderColor = ItemSwitchWithColorSliderBinding.bind(lyViewAllPlansRatingPlaceHolderColor);

      id = R.id.ly_view_all_plans_secure_with_play_store_background_color;
      View lyViewAllPlansSecureWithPlayStoreBackgroundColor = ViewBindings.findChildViewById(rootView, id);
      if (lyViewAllPlansSecureWithPlayStoreBackgroundColor == null) {
        break missingId;
      }
      ItemSwitchWithColorSliderBinding binding_lyViewAllPlansSecureWithPlayStoreBackgroundColor = ItemSwitchWithColorSliderBinding.bind(lyViewAllPlansSecureWithPlayStoreBackgroundColor);

      id = R.id.ly_view_all_plans_secure_with_play_store_text_color;
      View lyViewAllPlansSecureWithPlayStoreTextColor = ViewBindings.findChildViewById(rootView, id);
      if (lyViewAllPlansSecureWithPlayStoreTextColor == null) {
        break missingId;
      }
      ItemSwitchWithColorSliderBinding binding_lyViewAllPlansSecureWithPlayStoreTextColor = ItemSwitchWithColorSliderBinding.bind(lyViewAllPlansSecureWithPlayStoreTextColor);

      id = R.id.ly_view_all_plans_selected_item_data_color;
      View lyViewAllPlansSelectedItemDataColor = ViewBindings.findChildViewById(rootView, id);
      if (lyViewAllPlansSelectedItemDataColor == null) {
        break missingId;
      }
      ItemSwitchWithColorSliderBinding binding_lyViewAllPlansSelectedItemDataColor = ItemSwitchWithColorSliderBinding.bind(lyViewAllPlansSelectedItemDataColor);

      id = R.id.ly_view_all_plans_selected_sku_background_color;
      View lyViewAllPlansSelectedSkuBackgroundColor = ViewBindings.findChildViewById(rootView, id);
      if (lyViewAllPlansSelectedSkuBackgroundColor == null) {
        break missingId;
      }
      ItemSwitchWithColorSliderBinding binding_lyViewAllPlansSelectedSkuBackgroundColor = ItemSwitchWithColorSliderBinding.bind(lyViewAllPlansSelectedSkuBackgroundColor);

      id = R.id.ly_view_all_plans_sub_header_color;
      View lyViewAllPlansSubHeaderColor = ViewBindings.findChildViewById(rootView, id);
      if (lyViewAllPlansSubHeaderColor == null) {
        break missingId;
      }
      ItemSwitchWithColorSliderBinding binding_lyViewAllPlansSubHeaderColor = ItemSwitchWithColorSliderBinding.bind(lyViewAllPlansSubHeaderColor);

      id = R.id.ly_view_all_plans_unselected_item_data_color;
      View lyViewAllPlansUnselectedItemDataColor = ViewBindings.findChildViewById(rootView, id);
      if (lyViewAllPlansUnselectedItemDataColor == null) {
        break missingId;
      }
      ItemSwitchWithColorSliderBinding binding_lyViewAllPlansUnselectedItemDataColor = ItemSwitchWithColorSliderBinding.bind(lyViewAllPlansUnselectedItemDataColor);

      id = R.id.ly_view_all_plans_unselected_sku_background_color;
      View lyViewAllPlansUnselectedSkuBackgroundColor = ViewBindings.findChildViewById(rootView, id);
      if (lyViewAllPlansUnselectedSkuBackgroundColor == null) {
        break missingId;
      }
      ItemSwitchWithColorSliderBinding binding_lyViewAllPlansUnselectedSkuBackgroundColor = ItemSwitchWithColorSliderBinding.bind(lyViewAllPlansUnselectedSkuBackgroundColor);

      ConstraintLayout main = (ConstraintLayout) rootView;

      id = R.id.sp_animation_name;
      Spinner spAnimationName = ViewBindings.findChildViewById(rootView, id);
      if (spAnimationName == null) {
        break missingId;
      }

      id = R.id.sp_language;
      Spinner spLanguage = ViewBindings.findChildViewById(rootView, id);
      if (spLanguage == null) {
        break missingId;
      }

      id = R.id.switch_close_ad_for_time_line_screen;
      SwitchCompat switchCloseAdForTimeLineScreen = ViewBindings.findChildViewById(rootView, id);
      if (switchCloseAdForTimeLineScreen == null) {
        break missingId;
      }

      id = R.id.switch_close_ad_for_view_all_plans_screen;
      SwitchCompat switchCloseAdForViewAllPlansScreen = ViewBindings.findChildViewById(rootView, id);
      if (switchCloseAdForViewAllPlansScreen == null) {
        break missingId;
      }

      id = R.id.switch_close_ad_for_view_all_plans_screen_after_splash;
      SwitchCompat switchCloseAdForViewAllPlansScreenAfterSplash = ViewBindings.findChildViewById(rootView, id);
      if (switchCloseAdForViewAllPlansScreenAfterSplash == null) {
        break missingId;
      }

      id = R.id.switch_is_from_splash;
      SwitchCompat switchIsFromSplash = ViewBindings.findChildViewById(rootView, id);
      if (switchIsFromSplash == null) {
        break missingId;
      }

      id = R.id.switch_privacy_policy;
      SwitchCompat switchPrivacyPolicy = ViewBindings.findChildViewById(rootView, id);
      if (switchPrivacyPolicy == null) {
        break missingId;
      }

      id = R.id.switch_show_only_view_all_plans;
      SwitchCompat switchShowOnlyViewAllPlans = ViewBindings.findChildViewById(rootView, id);
      if (switchShowOnlyViewAllPlans == null) {
        break missingId;
      }

      id = R.id.switch_terms_of_use;
      SwitchCompat switchTermsOfUse = ViewBindings.findChildViewById(rootView, id);
      if (switchTermsOfUse == null) {
        break missingId;
      }

      id = R.id.switch_time_line_instant_access_animation;
      SwitchCompat switchTimeLineInstantAccessAnimation = ViewBindings.findChildViewById(rootView, id);
      if (switchTimeLineInstantAccessAnimation == null) {
        break missingId;
      }

      id = R.id.switch_time_line_screen_ui;
      SwitchCompat switchTimeLineScreenUi = ViewBindings.findChildViewById(rootView, id);
      if (switchTimeLineScreenUi == null) {
        break missingId;
      }

      id = R.id.switch_time_line_slider_animation;
      SwitchCompat switchTimeLineSliderAnimation = ViewBindings.findChildViewById(rootView, id);
      if (switchTimeLineSliderAnimation == null) {
        break missingId;
      }

      id = R.id.switch_view_all_plans_screen_ui;
      SwitchCompat switchViewAllPlansScreenUi = ViewBindings.findChildViewById(rootView, id);
      if (switchViewAllPlansScreenUi == null) {
        break missingId;
      }

      id = R.id.txt_animation_name;
      TextView txtAnimationName = ViewBindings.findChildViewById(rootView, id);
      if (txtAnimationName == null) {
        break missingId;
      }

      id = R.id.txt_language;
      TextView txtLanguage = ViewBindings.findChildViewById(rootView, id);
      if (txtLanguage == null) {
        break missingId;
      }

      return new ActivityManageSubscriptionUiBinding((ConstraintLayout) rootView,
          animationTimeSlider, btnCancel, btnTest, btnUpdate, clBottom, clTimeLineScreenUi, clTop,
          clViewAllPlansScreenUi, etPrivacyPolicy, etTermsOfUse, binding_layoutHeader,
          binding_lyTimeLineButtonContinueTextColor, binding_lyTimeLineCloseIconColor,
          binding_lyTimeLineHeaderColor, binding_lyTimeLineHintTextColor,
          binding_lyTimeLineInstantAccessHintTextColor, binding_lyTimeLineMainColor,
          binding_lyTimeLineSecureWithPlayStoreBackgroundColor,
          binding_lyTimeLineSecureWithPlayStoreTextColor, binding_lyTimeLineTrackInactiveColor,
          binding_lyViewAllPlansCloseIconColor, binding_lyViewAllPlansHeaderColor,
          binding_lyViewAllPlansItemBoxBackgroundColor, binding_lyViewAllPlansPayNothingNowColor,
          binding_lyViewAllPlansRatingColor, binding_lyViewAllPlansRatingIndicatorColor,
          binding_lyViewAllPlansRatingPlaceHolderColor,
          binding_lyViewAllPlansSecureWithPlayStoreBackgroundColor,
          binding_lyViewAllPlansSecureWithPlayStoreTextColor,
          binding_lyViewAllPlansSelectedItemDataColor,
          binding_lyViewAllPlansSelectedSkuBackgroundColor, binding_lyViewAllPlansSubHeaderColor,
          binding_lyViewAllPlansUnselectedItemDataColor,
          binding_lyViewAllPlansUnselectedSkuBackgroundColor, main, spAnimationName, spLanguage,
          switchCloseAdForTimeLineScreen, switchCloseAdForViewAllPlansScreen,
          switchCloseAdForViewAllPlansScreenAfterSplash, switchIsFromSplash, switchPrivacyPolicy,
          switchShowOnlyViewAllPlans, switchTermsOfUse, switchTimeLineInstantAccessAnimation,
          switchTimeLineScreenUi, switchTimeLineSliderAnimation, switchViewAllPlansScreenUi,
          txtAnimationName, txtLanguage);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
