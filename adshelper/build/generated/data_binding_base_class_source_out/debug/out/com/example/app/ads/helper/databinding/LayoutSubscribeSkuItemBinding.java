// Generated by view binder compiler. Do not edit!
package com.example.app.ads.helper.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.app.ads.helper.R;
import com.google.android.material.imageview.ShapeableImageView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class LayoutSubscribeSkuItemBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ShapeableImageView ivBottomPriceBackground;

  @NonNull
  public final ShapeableImageView ivGradiantBackground;

  @NonNull
  public final ShapeableImageView ivPlanIcon;

  @NonNull
  public final ShapeableImageView ivTopBackground;

  @NonNull
  public final ShapeableImageView ivTopPricePercentageBackground;

  @NonNull
  public final ConstraintLayout materialCardView;

  @NonNull
  public final TextView txtPlanPrice;

  @NonNull
  public final TextView txtPlanPricePercentage;

  @NonNull
  public final TextView txtPlanReferencePrice;

  @NonNull
  public final TextView txtPlanTitle;

  @NonNull
  public final TextView txtPlanTrialPeriod;

  private LayoutSubscribeSkuItemBinding(@NonNull ConstraintLayout rootView,
      @NonNull ShapeableImageView ivBottomPriceBackground,
      @NonNull ShapeableImageView ivGradiantBackground, @NonNull ShapeableImageView ivPlanIcon,
      @NonNull ShapeableImageView ivTopBackground,
      @NonNull ShapeableImageView ivTopPricePercentageBackground,
      @NonNull ConstraintLayout materialCardView, @NonNull TextView txtPlanPrice,
      @NonNull TextView txtPlanPricePercentage, @NonNull TextView txtPlanReferencePrice,
      @NonNull TextView txtPlanTitle, @NonNull TextView txtPlanTrialPeriod) {
    this.rootView = rootView;
    this.ivBottomPriceBackground = ivBottomPriceBackground;
    this.ivGradiantBackground = ivGradiantBackground;
    this.ivPlanIcon = ivPlanIcon;
    this.ivTopBackground = ivTopBackground;
    this.ivTopPricePercentageBackground = ivTopPricePercentageBackground;
    this.materialCardView = materialCardView;
    this.txtPlanPrice = txtPlanPrice;
    this.txtPlanPricePercentage = txtPlanPricePercentage;
    this.txtPlanReferencePrice = txtPlanReferencePrice;
    this.txtPlanTitle = txtPlanTitle;
    this.txtPlanTrialPeriod = txtPlanTrialPeriod;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static LayoutSubscribeSkuItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static LayoutSubscribeSkuItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.layout_subscribe_sku_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static LayoutSubscribeSkuItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.iv_bottom_price_background;
      ShapeableImageView ivBottomPriceBackground = ViewBindings.findChildViewById(rootView, id);
      if (ivBottomPriceBackground == null) {
        break missingId;
      }

      id = R.id.iv_gradiant_background;
      ShapeableImageView ivGradiantBackground = ViewBindings.findChildViewById(rootView, id);
      if (ivGradiantBackground == null) {
        break missingId;
      }

      id = R.id.iv_plan_icon;
      ShapeableImageView ivPlanIcon = ViewBindings.findChildViewById(rootView, id);
      if (ivPlanIcon == null) {
        break missingId;
      }

      id = R.id.iv_top_background;
      ShapeableImageView ivTopBackground = ViewBindings.findChildViewById(rootView, id);
      if (ivTopBackground == null) {
        break missingId;
      }

      id = R.id.iv_top_price_percentage_background;
      ShapeableImageView ivTopPricePercentageBackground = ViewBindings.findChildViewById(rootView, id);
      if (ivTopPricePercentageBackground == null) {
        break missingId;
      }

      id = R.id.materialCardView;
      ConstraintLayout materialCardView = ViewBindings.findChildViewById(rootView, id);
      if (materialCardView == null) {
        break missingId;
      }

      id = R.id.txt_plan_price;
      TextView txtPlanPrice = ViewBindings.findChildViewById(rootView, id);
      if (txtPlanPrice == null) {
        break missingId;
      }

      id = R.id.txt_plan_price_percentage;
      TextView txtPlanPricePercentage = ViewBindings.findChildViewById(rootView, id);
      if (txtPlanPricePercentage == null) {
        break missingId;
      }

      id = R.id.txt_plan_reference_price;
      TextView txtPlanReferencePrice = ViewBindings.findChildViewById(rootView, id);
      if (txtPlanReferencePrice == null) {
        break missingId;
      }

      id = R.id.txt_plan_title;
      TextView txtPlanTitle = ViewBindings.findChildViewById(rootView, id);
      if (txtPlanTitle == null) {
        break missingId;
      }

      id = R.id.txt_plan_trial_period;
      TextView txtPlanTrialPeriod = ViewBindings.findChildViewById(rootView, id);
      if (txtPlanTrialPeriod == null) {
        break missingId;
      }

      return new LayoutSubscribeSkuItemBinding((ConstraintLayout) rootView, ivBottomPriceBackground,
          ivGradiantBackground, ivPlanIcon, ivTopBackground, ivTopPricePercentageBackground,
          materialCardView, txtPlanPrice, txtPlanPricePercentage, txtPlanReferencePrice,
          txtPlanTitle, txtPlanTrialPeriod);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
