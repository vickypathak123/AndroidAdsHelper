// Generated by view binder compiler. Do not edit!
package com.example.app.ads.helper.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.Barrier;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.constraintlayout.widget.Guideline;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.airbnb.lottie.LottieAnimationView;
import com.example.app.ads.helper.R;
import com.example.app.ads.helper.purchase.widget.SquareLayout;
import com.google.android.material.imageview.ShapeableImageView;
import com.google.android.material.slider.Slider;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityTimeLineBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Barrier barrierTimeLineIconEnd;

  @NonNull
  public final Barrier barrierTimeLineInstantAccessBottom;

  @NonNull
  public final Barrier barrierTimeLineNowBottom;

  @NonNull
  public final Barrier barrierTimeLinePremiumBeginsBottom;

  @NonNull
  public final Barrier barrierTimeLineTrialReminderBottom;

  @NonNull
  public final Guideline glEnd1;

  @NonNull
  public final Guideline glEnd2;

  @NonNull
  public final Guideline glStart1;

  @NonNull
  public final Guideline glStart2;

  @NonNull
  public final Guideline glTop1;

  @NonNull
  public final ShapeableImageView ivCheckNow;

  @NonNull
  public final ShapeableImageView ivClose;

  @NonNull
  public final ShapeableImageView ivPremiumBegins;

  @NonNull
  public final ShapeableImageView ivTrialReminder;

  @NonNull
  public final ShapeableImageView ivUnlockToday;

  @NonNull
  public final ShapeableImageView ivUnlockTodayBg;

  @NonNull
  public final LottieAnimationView lottieUnlockTodayBg;

  @NonNull
  public final LayoutSecureWithPlayStoreBinding lySecureWithPlayStore;

  @NonNull
  public final LayoutSubscribeButtonBinding lySubscribeButton;

  @NonNull
  public final SquareLayout squareView;

  @NonNull
  public final Slider timeLineSlider;

  @NonNull
  public final TextView txtFreeThenPerPeriod;

  @NonNull
  public final TextView txtHaveDoubts;

  @NonNull
  public final TextView txtInstantAccessHint;

  @NonNull
  public final TextView txtNow;

  @NonNull
  public final TextView txtPayNothingNow;

  @NonNull
  public final TextView txtPremiumBegins;

  @NonNull
  public final TextView txtPremiumBeginsHint;

  @NonNull
  public final TextView txtPrivacyPolicy;

  @NonNull
  public final TextView txtStartWithAFreeTrial;

  @NonNull
  public final TextView txtTermsOfUse;

  @NonNull
  public final TextView txtTodayGetInstantAccess;

  @NonNull
  public final TextView txtTrialReminder;

  @NonNull
  public final TextView txtTrialReminderHint;

  @NonNull
  public final TextView txtUnlockAllTheFeatures;

  @NonNull
  public final TextView txtViewAllPlans;

  @NonNull
  public final View viewCenterHorizontalCheckNow;

  @NonNull
  public final View viewCenterVerticalCheckNow;

  private ActivityTimeLineBinding(@NonNull ConstraintLayout rootView,
      @NonNull Barrier barrierTimeLineIconEnd, @NonNull Barrier barrierTimeLineInstantAccessBottom,
      @NonNull Barrier barrierTimeLineNowBottom,
      @NonNull Barrier barrierTimeLinePremiumBeginsBottom,
      @NonNull Barrier barrierTimeLineTrialReminderBottom, @NonNull Guideline glEnd1,
      @NonNull Guideline glEnd2, @NonNull Guideline glStart1, @NonNull Guideline glStart2,
      @NonNull Guideline glTop1, @NonNull ShapeableImageView ivCheckNow,
      @NonNull ShapeableImageView ivClose, @NonNull ShapeableImageView ivPremiumBegins,
      @NonNull ShapeableImageView ivTrialReminder, @NonNull ShapeableImageView ivUnlockToday,
      @NonNull ShapeableImageView ivUnlockTodayBg, @NonNull LottieAnimationView lottieUnlockTodayBg,
      @NonNull LayoutSecureWithPlayStoreBinding lySecureWithPlayStore,
      @NonNull LayoutSubscribeButtonBinding lySubscribeButton, @NonNull SquareLayout squareView,
      @NonNull Slider timeLineSlider, @NonNull TextView txtFreeThenPerPeriod,
      @NonNull TextView txtHaveDoubts, @NonNull TextView txtInstantAccessHint,
      @NonNull TextView txtNow, @NonNull TextView txtPayNothingNow,
      @NonNull TextView txtPremiumBegins, @NonNull TextView txtPremiumBeginsHint,
      @NonNull TextView txtPrivacyPolicy, @NonNull TextView txtStartWithAFreeTrial,
      @NonNull TextView txtTermsOfUse, @NonNull TextView txtTodayGetInstantAccess,
      @NonNull TextView txtTrialReminder, @NonNull TextView txtTrialReminderHint,
      @NonNull TextView txtUnlockAllTheFeatures, @NonNull TextView txtViewAllPlans,
      @NonNull View viewCenterHorizontalCheckNow, @NonNull View viewCenterVerticalCheckNow) {
    this.rootView = rootView;
    this.barrierTimeLineIconEnd = barrierTimeLineIconEnd;
    this.barrierTimeLineInstantAccessBottom = barrierTimeLineInstantAccessBottom;
    this.barrierTimeLineNowBottom = barrierTimeLineNowBottom;
    this.barrierTimeLinePremiumBeginsBottom = barrierTimeLinePremiumBeginsBottom;
    this.barrierTimeLineTrialReminderBottom = barrierTimeLineTrialReminderBottom;
    this.glEnd1 = glEnd1;
    this.glEnd2 = glEnd2;
    this.glStart1 = glStart1;
    this.glStart2 = glStart2;
    this.glTop1 = glTop1;
    this.ivCheckNow = ivCheckNow;
    this.ivClose = ivClose;
    this.ivPremiumBegins = ivPremiumBegins;
    this.ivTrialReminder = ivTrialReminder;
    this.ivUnlockToday = ivUnlockToday;
    this.ivUnlockTodayBg = ivUnlockTodayBg;
    this.lottieUnlockTodayBg = lottieUnlockTodayBg;
    this.lySecureWithPlayStore = lySecureWithPlayStore;
    this.lySubscribeButton = lySubscribeButton;
    this.squareView = squareView;
    this.timeLineSlider = timeLineSlider;
    this.txtFreeThenPerPeriod = txtFreeThenPerPeriod;
    this.txtHaveDoubts = txtHaveDoubts;
    this.txtInstantAccessHint = txtInstantAccessHint;
    this.txtNow = txtNow;
    this.txtPayNothingNow = txtPayNothingNow;
    this.txtPremiumBegins = txtPremiumBegins;
    this.txtPremiumBeginsHint = txtPremiumBeginsHint;
    this.txtPrivacyPolicy = txtPrivacyPolicy;
    this.txtStartWithAFreeTrial = txtStartWithAFreeTrial;
    this.txtTermsOfUse = txtTermsOfUse;
    this.txtTodayGetInstantAccess = txtTodayGetInstantAccess;
    this.txtTrialReminder = txtTrialReminder;
    this.txtTrialReminderHint = txtTrialReminderHint;
    this.txtUnlockAllTheFeatures = txtUnlockAllTheFeatures;
    this.txtViewAllPlans = txtViewAllPlans;
    this.viewCenterHorizontalCheckNow = viewCenterHorizontalCheckNow;
    this.viewCenterVerticalCheckNow = viewCenterVerticalCheckNow;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityTimeLineBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityTimeLineBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_time_line, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityTimeLineBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.barrier_time_line_icon_end;
      Barrier barrierTimeLineIconEnd = ViewBindings.findChildViewById(rootView, id);
      if (barrierTimeLineIconEnd == null) {
        break missingId;
      }

      id = R.id.barrier_time_line_instant_access_bottom;
      Barrier barrierTimeLineInstantAccessBottom = ViewBindings.findChildViewById(rootView, id);
      if (barrierTimeLineInstantAccessBottom == null) {
        break missingId;
      }

      id = R.id.barrier_time_line_now_bottom;
      Barrier barrierTimeLineNowBottom = ViewBindings.findChildViewById(rootView, id);
      if (barrierTimeLineNowBottom == null) {
        break missingId;
      }

      id = R.id.barrier_time_line_premium_begins_bottom;
      Barrier barrierTimeLinePremiumBeginsBottom = ViewBindings.findChildViewById(rootView, id);
      if (barrierTimeLinePremiumBeginsBottom == null) {
        break missingId;
      }

      id = R.id.barrier_time_line_trial_reminder_bottom;
      Barrier barrierTimeLineTrialReminderBottom = ViewBindings.findChildViewById(rootView, id);
      if (barrierTimeLineTrialReminderBottom == null) {
        break missingId;
      }

      id = R.id.gl_end_1;
      Guideline glEnd1 = ViewBindings.findChildViewById(rootView, id);
      if (glEnd1 == null) {
        break missingId;
      }

      id = R.id.gl_end_2;
      Guideline glEnd2 = ViewBindings.findChildViewById(rootView, id);
      if (glEnd2 == null) {
        break missingId;
      }

      id = R.id.gl_start_1;
      Guideline glStart1 = ViewBindings.findChildViewById(rootView, id);
      if (glStart1 == null) {
        break missingId;
      }

      id = R.id.gl_start_2;
      Guideline glStart2 = ViewBindings.findChildViewById(rootView, id);
      if (glStart2 == null) {
        break missingId;
      }

      id = R.id.gl_top_1;
      Guideline glTop1 = ViewBindings.findChildViewById(rootView, id);
      if (glTop1 == null) {
        break missingId;
      }

      id = R.id.iv_check_now;
      ShapeableImageView ivCheckNow = ViewBindings.findChildViewById(rootView, id);
      if (ivCheckNow == null) {
        break missingId;
      }

      id = R.id.iv_close;
      ShapeableImageView ivClose = ViewBindings.findChildViewById(rootView, id);
      if (ivClose == null) {
        break missingId;
      }

      id = R.id.iv_premium_begins;
      ShapeableImageView ivPremiumBegins = ViewBindings.findChildViewById(rootView, id);
      if (ivPremiumBegins == null) {
        break missingId;
      }

      id = R.id.iv_trial_reminder;
      ShapeableImageView ivTrialReminder = ViewBindings.findChildViewById(rootView, id);
      if (ivTrialReminder == null) {
        break missingId;
      }

      id = R.id.iv_unlock_today;
      ShapeableImageView ivUnlockToday = ViewBindings.findChildViewById(rootView, id);
      if (ivUnlockToday == null) {
        break missingId;
      }

      id = R.id.iv_unlock_today_bg;
      ShapeableImageView ivUnlockTodayBg = ViewBindings.findChildViewById(rootView, id);
      if (ivUnlockTodayBg == null) {
        break missingId;
      }

      id = R.id.lottie_unlock_today_bg;
      LottieAnimationView lottieUnlockTodayBg = ViewBindings.findChildViewById(rootView, id);
      if (lottieUnlockTodayBg == null) {
        break missingId;
      }

      id = R.id.ly_secure_with_play_store;
      View lySecureWithPlayStore = ViewBindings.findChildViewById(rootView, id);
      if (lySecureWithPlayStore == null) {
        break missingId;
      }
      LayoutSecureWithPlayStoreBinding binding_lySecureWithPlayStore = LayoutSecureWithPlayStoreBinding.bind(lySecureWithPlayStore);

      id = R.id.ly_subscribe_button;
      View lySubscribeButton = ViewBindings.findChildViewById(rootView, id);
      if (lySubscribeButton == null) {
        break missingId;
      }
      LayoutSubscribeButtonBinding binding_lySubscribeButton = LayoutSubscribeButtonBinding.bind(lySubscribeButton);

      id = R.id.squareView;
      SquareLayout squareView = ViewBindings.findChildViewById(rootView, id);
      if (squareView == null) {
        break missingId;
      }

      id = R.id.time_line_slider;
      Slider timeLineSlider = ViewBindings.findChildViewById(rootView, id);
      if (timeLineSlider == null) {
        break missingId;
      }

      id = R.id.txt_free_then_per_period;
      TextView txtFreeThenPerPeriod = ViewBindings.findChildViewById(rootView, id);
      if (txtFreeThenPerPeriod == null) {
        break missingId;
      }

      id = R.id.txt_have_doubts;
      TextView txtHaveDoubts = ViewBindings.findChildViewById(rootView, id);
      if (txtHaveDoubts == null) {
        break missingId;
      }

      id = R.id.txt_instant_access_hint;
      TextView txtInstantAccessHint = ViewBindings.findChildViewById(rootView, id);
      if (txtInstantAccessHint == null) {
        break missingId;
      }

      id = R.id.txt_now;
      TextView txtNow = ViewBindings.findChildViewById(rootView, id);
      if (txtNow == null) {
        break missingId;
      }

      id = R.id.txt_pay_nothing_now;
      TextView txtPayNothingNow = ViewBindings.findChildViewById(rootView, id);
      if (txtPayNothingNow == null) {
        break missingId;
      }

      id = R.id.txt_premium_begins;
      TextView txtPremiumBegins = ViewBindings.findChildViewById(rootView, id);
      if (txtPremiumBegins == null) {
        break missingId;
      }

      id = R.id.txt_premium_begins_hint;
      TextView txtPremiumBeginsHint = ViewBindings.findChildViewById(rootView, id);
      if (txtPremiumBeginsHint == null) {
        break missingId;
      }

      id = R.id.txt_privacy_policy;
      TextView txtPrivacyPolicy = ViewBindings.findChildViewById(rootView, id);
      if (txtPrivacyPolicy == null) {
        break missingId;
      }

      id = R.id.txt_start_with_a_free_trial;
      TextView txtStartWithAFreeTrial = ViewBindings.findChildViewById(rootView, id);
      if (txtStartWithAFreeTrial == null) {
        break missingId;
      }

      id = R.id.txt_terms_of_use;
      TextView txtTermsOfUse = ViewBindings.findChildViewById(rootView, id);
      if (txtTermsOfUse == null) {
        break missingId;
      }

      id = R.id.txt_today_get_instant_access;
      TextView txtTodayGetInstantAccess = ViewBindings.findChildViewById(rootView, id);
      if (txtTodayGetInstantAccess == null) {
        break missingId;
      }

      id = R.id.txt_trial_reminder;
      TextView txtTrialReminder = ViewBindings.findChildViewById(rootView, id);
      if (txtTrialReminder == null) {
        break missingId;
      }

      id = R.id.txt_trial_reminder_hint;
      TextView txtTrialReminderHint = ViewBindings.findChildViewById(rootView, id);
      if (txtTrialReminderHint == null) {
        break missingId;
      }

      id = R.id.txt_unlock_all_the_features;
      TextView txtUnlockAllTheFeatures = ViewBindings.findChildViewById(rootView, id);
      if (txtUnlockAllTheFeatures == null) {
        break missingId;
      }

      id = R.id.txt_view_all_plans;
      TextView txtViewAllPlans = ViewBindings.findChildViewById(rootView, id);
      if (txtViewAllPlans == null) {
        break missingId;
      }

      id = R.id.view_center_horizontal_check_now;
      View viewCenterHorizontalCheckNow = ViewBindings.findChildViewById(rootView, id);
      if (viewCenterHorizontalCheckNow == null) {
        break missingId;
      }

      id = R.id.view_center_vertical_check_now;
      View viewCenterVerticalCheckNow = ViewBindings.findChildViewById(rootView, id);
      if (viewCenterVerticalCheckNow == null) {
        break missingId;
      }

      return new ActivityTimeLineBinding((ConstraintLayout) rootView, barrierTimeLineIconEnd,
          barrierTimeLineInstantAccessBottom, barrierTimeLineNowBottom,
          barrierTimeLinePremiumBeginsBottom, barrierTimeLineTrialReminderBottom, glEnd1, glEnd2,
          glStart1, glStart2, glTop1, ivCheckNow, ivClose, ivPremiumBegins, ivTrialReminder,
          ivUnlockToday, ivUnlockTodayBg, lottieUnlockTodayBg, binding_lySecureWithPlayStore,
          binding_lySubscribeButton, squareView, timeLineSlider, txtFreeThenPerPeriod,
          txtHaveDoubts, txtInstantAccessHint, txtNow, txtPayNothingNow, txtPremiumBegins,
          txtPremiumBeginsHint, txtPrivacyPolicy, txtStartWithAFreeTrial, txtTermsOfUse,
          txtTodayGetInstantAccess, txtTrialReminder, txtTrialReminderHint, txtUnlockAllTheFeatures,
          txtViewAllPlans, viewCenterHorizontalCheckNow, viewCenterVerticalCheckNow);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
